// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  role          String    @default("ROLE1")
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  uploads  Upload[]
  teachers Teacher[]
  doctors  Doctor[]
  engineers Engineer[]
  lawyers  Lawyer[]
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  userId       String
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Personal Information
  firstName       String
  lastName        String
  email           String   @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  
  // Professional Information
  employeeId      String   @unique
  department      String
  subject         String
  gradeLevel      String
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  hireDate        DateTime?
  isActive        Boolean  @default(true)
  
  // Education & Certifications
  highestDegree   String?
  university      String?
  graduationYear  Int?
  certifications  String? // JSON array
  specializations String? // JSON array
  
  // Performance & Ratings
  performanceRating Float? @db.Float
  studentSatisfaction Float? @db.Float
  attendanceRate   Float? @db.Float
  
  // Additional Fields
  bio             String? @db.Text
  profileImage    String?
  emergencyContact String?
  emergencyPhone  String?
  notes           String? @db.Text
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doctor {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Personal Information
  firstName       String
  lastName        String
  email           String   @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  
  // Professional Information
  employeeId      String   @unique
  department      String
  specialization  String
  licenseNumber   String   @unique
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  hireDate        DateTime?
  isActive        Boolean  @default(true)
  
  // Medical Information
  medicalSchool   String?
  graduationYear  Int?
  boardCertifications String? // JSON array
  languages       String? // JSON array
  
  // Performance & Metrics
  patientSatisfaction Float? @db.Float
  successRate     Float? @db.Float
  averageWaitTime Int? // in minutes
  
  // Schedule & Availability
  workingHours   String? // JSON object
  onCallSchedule String? // JSON object
  
  // Additional Fields
  bio             String? @db.Text
  profileImage    String?
  emergencyContact String?
  emergencyPhone  String?
  notes           String? @db.Text
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Engineer {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Personal Information
  firstName       String
  lastName        String
  email           String   @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  
  // Professional Information
  employeeId      String   @unique
  department      String
  specialization  String
  engineeringType String // Civil, Mechanical, Electrical, Software, etc.
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  hireDate        DateTime?
  isActive        Boolean  @default(true)
  
  // Education & Certifications
  highestDegree   String?
  university      String?
  graduationYear  Int?
  certifications  String? // JSON array
  technicalSkills String? // JSON array
  
  // Performance & Projects
  projectSuccessRate Float? @db.Float
  codeQuality      Float? @db.Float
  innovationScore  Float? @db.Float
  
  // Technical Details
  programmingLanguages String? // JSON array
  frameworks         String? // JSON array
  tools              String? // JSON array
  
  // Additional Fields
  bio               String? @db.Text
  profileImage      String?
  emergencyContact  String?
  emergencyPhone    String?
  notes             String? @db.Text
  
  // Relations
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lawyer {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Personal Information
  firstName       String
  lastName        String
  email           String   @unique
  phone           String?
  dateOfBirth     DateTime?
  gender          String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  
  // Professional Information
  employeeId      String   @unique
  department      String
  practiceArea    String
  barNumber       String   @unique
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  hireDate        DateTime?
  isActive        Boolean  @default(true)
  
  // Legal Information
  lawSchool       String?
  graduationYear  Int?
  barAdmissions   String? // JSON array
  specializations String? // JSON array
  
  // Performance & Cases
  caseSuccessRate Float? @db.Float
  clientSatisfaction Float? @db.Float
  averageCaseDuration Int? // in days
  
  // Practice Details
  courtExperience String? // JSON array
  languages       String? // JSON array
  
  // Additional Fields
  bio             String? @db.Text
  profileImage    String?
  emergencyContact String?
  emergencyPhone  String?
  notes           String? @db.Text
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}


