// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  role          String    @default("ROLE1")
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts Account[]
  sessions Session[]
  uploads  Upload[]
  teachers Teacher[]
  doctors  Doctor[]
  engineers Engineer[]
  lawyers  Lawyer[]
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  formLibraries FormLibrary[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  userId       String
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Essential fields only (10 total)
  firstName       String
  lastName        String
  email           String   @unique
  employeeId      String   @unique
  department      String
  subject         String
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  hireDate        DateTime?
  isActive        Boolean  @default(true)
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Doctor {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Essential fields only (10 total)
  firstName       String
  lastName        String
  email           String   @unique
  employeeId      String   @unique
  department      String
  specialization  String
  licenseNumber   String   @unique
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Engineer {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Essential fields only (10 total)
  firstName       String
  lastName        String
  email           String   @unique
  employeeId      String   @unique
  department      String
  specialization  String
  engineeringType String
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  
  // Relations
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lawyer {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Essential fields only (10 total)
  firstName       String
  lastName        String
  email           String   @unique
  employeeId      String   @unique
  department      String
  practiceArea    String
  barNumber       String   @unique
  yearsOfExperience Int?
  salary          Decimal? @db.Decimal(10, 2)
  isActive        Boolean  @default(true)
  
  // Relations
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormLibrary {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Basic Information
  title           String   @db.VarChar(200)
  description     String?  @db.Text
  category        String   @db.VarChar(100) // Basic, Advanced, Specialized
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  
  // Text Fields
  textField       String?  @db.VarChar(255)
  emailField      String?  @db.VarChar(255)
  passwordField   String?  @db.VarChar(255)
  phoneField      String?  @db.VarChar(20)
  urlField        String?  @db.VarChar(500)
  searchField     String?  @db.VarChar(255)
  textareaField   String?  @db.Text
  richTextField   String?  @db.LongText
  
  // Numeric Fields
  numberField     Decimal? @db.Decimal(10, 2)
  integerField    Int?
  rangeField      Int?     // 0-100
  sliderValue     Float?   @db.Float
  
  // Date & Time Fields
  dateField       DateTime?
  timeField       String?  @db.VarChar(10) // HH:MM format
  dateTimeField   DateTime?
  monthField      String?  @db.VarChar(7)  // YYYY-MM format
  weekField       String?  @db.VarChar(10) // YYYY-WNN format
  
  // Selection Fields
  singleSelect    String?  @db.VarChar(100)
  multiSelect     String?  // JSON array
  radioSelection  String?  @db.VarChar(100)
  checkboxGroup   String?  // JSON array
  
  // Boolean Fields
  switchField     Boolean  @default(false)
  checkboxField   Boolean  @default(false)
  
  // File & Media Fields
  filePath        String?  @db.VarChar(500)
  imagePath       String?  @db.VarChar(500)
  documentPath    String?  @db.VarChar(500)
  
  // Special Fields
  colorField      String?  @db.VarChar(7)  // Hex color
  ratingField     Float?   @db.Float        // 0-5 rating
  tagsField       String?  // JSON array
  
  // Advanced Fields
  autocompleteField String? @db.VarChar(255)
  comboboxField    String?  @db.VarChar(255)
  multiInputField  String?  // JSON array for multiple inputs
  
  // Validation & Metadata
  isRequired      Boolean  @default(false)
  minLength       Int?
  maxLength       Int?
  minValue        Decimal? @db.Decimal(10, 2)
  maxValue        Decimal? @db.Decimal(10, 2)
  pattern         String?  @db.VarChar(200) // Regex pattern
  placeholder     String?  @db.VarChar(255)
  helpText        String?  @db.Text
  
  // Field Configuration
  fieldType       String   @db.VarChar(50)  // input, select, textarea, etc.
  inputMode       String?  @db.VarChar(20)  // text, numeric, email, etc.
  step            Decimal? @db.Decimal(10, 2) // For number/range inputs
  multiple        Boolean  @default(false)   // For file/select inputs
  
  // Conditional Logic
  dependsOn       String?  @db.VarChar(100) // Field dependency
  condition       String?  @db.VarChar(200) // JSON condition
  isVisible       Boolean  @default(true)
  isDisabled      Boolean  @default(false)
  
  // Styling & Layout
  fieldSize       String?  @db.VarChar(20)  // sm, md, lg
  fieldWidth      String?  @db.VarChar(20)  // full, half, third
  cssClass        String?  @db.VarChar(200)
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([category, isActive])
  @@index([sortOrder])
}


