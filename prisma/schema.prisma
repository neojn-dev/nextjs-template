// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  email              String    @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  profileImage       String? // relative path to avatar image under uploads/avatars
  roleId             String?
  emailVerified      DateTime?
  isActive           Boolean   @default(true)
  mustChangePassword Boolean   @default(false)
  createdByAdmin     Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  role                       Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull)
  accounts                   Account[]
  sessions                   Session[]
  uploads                    Upload[]
  verificationTokens         VerificationToken[]
  passwordResetTokens        PasswordResetToken[]
  // Inverse relations for workflows and audit
  createdTransferRequests    TransferRequest[]    @relation("CreatedByUser")
  supervisedTransferRequests TransferRequest[]    @relation("SupervisorUser")
  managedTransferRequests    TransferRequest[]    @relation("ManagerUser")
  approvedSteps              ApprovalStep[]       @relation("ApproverUser")
  authoredTransferComments   TransferComment[]    @relation("AuthorUser")
  auditLogs                  AuditLog[]           @relation("ActorUser")

  @@index([roleId])
  @@index([isActive])
  @@index([email])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String? // JSON string for permissions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@index([isActive])
  @@index([name])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  userId       String
  createdAt    DateTime @default(now())

  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Inverse relation for transfer attachments
  attachments TransferAttachment[] @relation("UploadAttachment")
}

model Teacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String    @unique
  employeeId        String    @unique
  department        String
  subject           String
  yearsOfExperience Int?
  salary            Decimal?  @db.Decimal(10, 2)
  hireDate          DateTime?
  isActive          Boolean   @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Doctor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  specialization    String
  licenseNumber     String   @unique
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([specialization])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Engineer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  specialization    String
  engineeringType   String
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([specialization])
  @@index([engineeringType])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Lawyer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  practiceArea      String
  barNumber         String   @unique
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([practiceArea])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

/// Workflow Enums for Transfer Requests
enum RequestStatus {
  Draft
  Submitted
  SupervisorApproved
  SupervisorChangesRequested
  SupervisorRejected
  ManagerApproved
  ManagerChangesRequested
  ManagerRejected
}

enum StepStatus {
  Pending
  Approved
  ChangesRequested
  Rejected
}

enum ApprovalRole {
  Supervisor
  Manager
}

/// Transfer Request workflow models
model TransferRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Business fields
  title        String
  purpose      String?
  fromLocation String
  toLocation   String
  itemsJson    String? // JSON string for item details (name, quantity, unit)

  // Workflow fields
  status      RequestStatus @default(Draft)
  submittedAt DateTime?
  completedAt DateTime?

  // Actors
  createdById  String
  supervisorId String?
  managerId    String?

  createdBy  User  @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: Cascade)
  supervisor User? @relation("SupervisorUser", fields: [supervisorId], references: [id], onDelete: SetNull)
  manager    User? @relation("ManagerUser", fields: [managerId], references: [id], onDelete: SetNull)

  steps       ApprovalStep[]
  attachments TransferAttachment[]
  comments    TransferComment[]

  @@index([createdById])
  @@index([supervisorId])
  @@index([managerId])
  @@index([status])
  @@index([createdAt])
}

model ApprovalStep {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  decidedAt DateTime?

  requestId  String
  role       ApprovalRole
  approverId String?
  status     StepStatus   @default(Pending)
  comment    String?

  request  TransferRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  approver User?           @relation("ApproverUser", fields: [approverId], references: [id], onDelete: SetNull)

  @@index([requestId])
  @@index([role])
  @@index([status])
}

model TransferAttachment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  requestId String
  uploadId  String
  label     String?

  request TransferRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  upload  Upload          @relation("UploadAttachment", fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([uploadId])
}

model TransferComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  requestId  String
  authorId   String
  authorRole ApprovalRole
  body       String

  request TransferRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  author  User            @relation("AuthorUser", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([authorId])
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  entityType String
  entityId   String
  action     String
  actorId    String?
  fromStatus String?
  toStatus   String?
  data       String?

  actor User? @relation("ActorUser", fields: [actorId], references: [id], onDelete: SetNull)

  @@index([entityType, entityId])
  @@index([createdAt])
}
