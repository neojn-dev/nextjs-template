// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  email              String    @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  roleId             String?
  emailVerified      DateTime?
  isActive           Boolean   @default(true)
  mustChangePassword Boolean   @default(false)
  createdByAdmin     Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  role                Role?                @relation(fields: [roleId], references: [id], onDelete: SetNull)
  accounts            Account[]
  sessions            Session[]
  uploads             Upload[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]

  @@index([roleId])
  @@index([isActive])
  @@index([email])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String? // JSON string for permissions
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@index([isActive])
  @@index([name])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  userId       String
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String    @unique
  employeeId        String    @unique
  department        String
  subject           String
  yearsOfExperience Int?
  salary            Decimal?  @db.Decimal(10, 2)
  hireDate          DateTime?
  isActive          Boolean   @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Doctor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  specialization    String
  licenseNumber     String   @unique
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([specialization])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Engineer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  specialization    String
  engineeringType   String
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([specialization])
  @@index([engineeringType])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}

model Lawyer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Essential fields only (10 total)
  firstName         String
  lastName          String
  email             String   @unique
  employeeId        String   @unique
  department        String
  practiceArea      String
  barNumber         String   @unique
  yearsOfExperience Int?
  salary            Decimal? @db.Decimal(10, 2)
  isActive          Boolean  @default(true)

  // No user relations - global data

  // Indexes for 5M+ records performance
  @@index([isActive])
  @@index([createdAt])
  @@index([department])
  @@index([practiceArea])
  @@index([department, isActive])
  @@index([firstName, lastName])
  @@index([email])
}
